import mqtt from 'mqtt';
import { Observable } from 'rxjs';
import { MqttConnection } from '../builder/ICloudClientBuilder';
import { IConnection, CloudMessage, ITokenConnection, ConnectionOptions } from './IConnection';
export declare class Connection implements IConnection {
    protected host: string;
    protected username: string;
    protected password: string;
    protected mqttConnect: MqttConnection;
    private _client;
    protected options: ConnectionOptions;
    messages: Observable<CloudMessage>;
    protected get client(): mqtt.MqttClient;
    protected set client(client: mqtt.MqttClient);
    constructor(host: string, username: string, password: string, mqttConnect: MqttConnection);
    connect(options?: Partial<ConnectionOptions>): Promise<boolean>;
    end(force?: boolean, opts?: Record<string, any>, cb?: mqtt.CloseCallback): IConnection;
    reconnect(opts?: mqtt.IClientReconnectOptions): IConnection;
    unsubscribe(topic: string | string[], opts?: any, callback?: any): IConnection;
    publish(topic: any, message: any, opts?: any, callback?: any): IConnection;
    subscribe(topic: any, callback?: any): IConnection;
    private messagesFrom;
}
export declare namespace Connection {
    type TokenConnection = new (host: string, token: string, mqttConnect: MqttConnection) => ITokenConnection;
    export const WithToken: TokenConnection;
    export {};
}
